DinnerEvent.java

============================DinnerEvent================1
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class DinnerEvent extends Event {

    // CH10 four new integer fields that represent numeric choices
    // for an entrée, two side dishes, and a dessert for each DinnerEvent object

    private int entree;
    private int sideDish1;
    private int sideDish2;
    private int dessert;
    public String entreeSelect;
    public String sideDish1Select;
    public String sideDish2Select;
    public String dessertSelect;

    // CH10 three final arrays that contain String menu options for entrées, side
    // dishes, and desserts, and store at least three choices in each array.
    final String[] entreeOption = { "Steak", "Chicken", "Fish", "none" };
    final String[] sideOption1 = { "Mac & Cheese", "Veggies", "Mash Potatoes", "none" };
    final String[] sideOption2 = { "Fries", "Salad", "Fruit", "none" };
    final String[] dessertOption = { "Pie", "Cake", "Ice Cream", "none" };

    // CH10 DinnerEvent constructor that requires arguments for an event number and
    // number of guests, and integer
    // menu choices for one entrée, two side dishes, and one dessert.

    // Chapter 11
    // Employee[] employee = new Employee[15];
    Employee[] employee = new Employee[15];

    public DinnerEvent(int numberOfGuests, String eventNumber, int c, int d, int e, int f) {
        super(numberOfGuests, eventNumber);
        entree = c;
        sideDish1 = d;
        sideDish2 = e;
        dessert = f;
    }

    public String getEntree() {
        return entreeOption[entree - 1];
    }

    public String getSide1() {
        return sideOption1[sideDish1 - 1];
    }

    public String getSide2() {
        return sideOption2[sideDish2 - 1];
    }

    public String getDessert() {
        return dessertOption[dessert - 1];
    }

    public void setEntree(int x) {
        this.entree = x;
    }

    public void setSide1(int x) {
        this.sideDish1 = x;
    }

    public void setSide2(int x) {
        this.sideDish2 = x;
    }

    public void setDessert(int x) {
        this.dessert = x;
    }

    public void getDinnerChoices(int c, int d, int e, int f) {
        entree = c;
        sideDish1 = d;
        sideDish2 = e;
        dessert = f;
    }

    public DinnerEvent() {
    }

    public String getMenu() {

        String menu = "<!--- Entrees ---!>\n";
        for (int i = 0; i < entreeOption.length; i++) {
            menu += ((i + 1) + ") " + entreeOption[i] + "\n");
        }
        menu += "\n<!--- Side Dish 1 ---!>\n";
        for (int i = 0; i < sideOption1.length; i++) {
            menu += ((i + 1) + ") " + sideOption1[i] + "\n");
        }
        menu += "\n<!--- Side Dish 2 ---!>\n";
        for (int i = 0; i < sideOption2.length; i++) {
            menu += ((i + 1) + ") " + sideOption2[i] + "\n");
        }

        menu += "\n<!--- Desserts ---!>\n";
        for (int i = 0; i < dessertOption.length; i++) {
            menu += ((i + 1) + ") " + dessertOption[i] + "\n");
        }
        System.out.println("Menu " + menu);
        return menu;
    }

    public Employee[] getEmps() {
        return employee;
    }

    public void setEmps(Employee[] waitstaff) {
        employee = waitstaff;
    }

}
================Coordinator===================2

public class Coordinator extends Employee {
    public final static double PAY_RATE = 20;

    public Coordinator(String ID, String lastName, String firstName, int payRate, String title) {
        super(ID, lastName, firstName, payRate, title);

    }

    public Coordinator() {
    }

    // no Coordinator can have a rate higher than 20.00
    @Override
    public void setRate(int x) {

    }

    @Override
    public void setTitle() {
        title = "coordinator";
    }

}

=================Employee.java========================3
public abstract class Employee {
    String ID;
    String lastName;
    String firstName;
    int payRate;
    String title;

    public Employee() {

    }

    public Employee(String ID, String firstName, String lastName, int payRate, String title) {
        this.ID = ID;
        this.firstName = firstName;
        this.lastName = lastName;
        this.payRate = payRate;
        this.title = title;
    }

    public String getID() {
        return ID;
    }

    public String getLastName() {
        return lastName;
    }

    public String getFirstName() {
        return firstName;
    }

    public int getRate() {
        return payRate;
    }

    public String getTitle() {
        return title;
    }

    public void setID(String x) {

    }

    public void setLastName(String x) {

    }

    public void setFirstName(String x) {

    }

    public void setRate(int rate) {
        payRate = rate;
    };

    public abstract void setTitle();

}

======================Waitstaff.java======================4
public class Waitstaff extends Employee {
    public static int PAY_RATE = 10;

    public Waitstaff() {

    }

    public Waitstaff(String ID, String lastName, String firstName, int payRate, String title) {
        super(ID, lastName, firstName, PAY_RATE, title);

    }

    // no waitstaff employee can have a rate higher than 10.00
    @Override
    public void setRate(int rate) {
        if (rate > PAY_RATE)
            payRate = PAY_RATE;
        else
            payRate = rate;
    }

    @Override
    public void setTitle() {
        title = "waitstaff";
    }

}
======================Bartender====================5

public class Bartender extends Employee {

    public static double PAY_RATE = 14;

    public Bartender(String ID, String lastName, String firstName, int payRate, String title) {
        super(ID, lastName, firstName, payRate, title);

    }

    public Bartender() {
    }

    // no Bartender can have a rate higher than 14.00
    @Override
    public void setRate(int rate) {
        PAY_RATE = rate;

    }

    @Override
    public void setTitle() {
        title = "bartender";

    }

}

=====================Event================6
import java.util.Arrays;
import java.util.Scanner;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

public class Event {

    public int pricePerGuests;

    // Two fields that holds the high and low price per guest

    public final static int lowPricePerGuest = 32;
    public final static int highPricePerGuest = 35;

    // Public final static fields
    public final static int CUT_OFF_VALUE = 50;

    // three private fields
    protected static String eventNumber;
    protected int numberOfGuests;
    private int priceTotal = 0;

    // Add a contact phone number field
    public static String phoneNumber = "";
    public static String phoneNumberFinal = "";
    public static String formattedPhoneNumber = "";

    public static int length;

    // CH8 integer field that holds an event type
    int eventType;
    String typeOutput;

    // CH8 Final String array that holds names of the types of events
    public final String[] typesOfEvents = { "wedding", "baptism", "birthday", "corporate", "other" };

    public Event() {

    }

    public Event(int numberOfGuests, String eventNumber2) {
    }

    // three public get methods
    public String getEventNumber() {
        return this.eventNumber;
    }

    public int getNumberOfGuest() {
        return this.numberOfGuests;
    }

    public void setEventNumber(String x) {
        if (x.length() < 5) {
            eventNumber = "A000";
        } else if (x.length() == 4) {
            if (!Character.isAlphabetic(x.charAt(0)) || !Character.isDigit(x.charAt(1))
                    || !Character.isDigit(x.charAt(2)) || !Character.isDigit(x.charAt(3))) {
            }
            eventNumber = x;
        }

    }

    // *CH8 get and set methods for the int event type*
    public int getEventType() {
        return this.eventType;
    }

    public void setEventType(int a) {
        int size = typesOfEvents.length;
        for (int x = 0; x < size; x++) {
            if (a > 5) {
                eventType = a;
                typeOutput = typesOfEvents[4];
            } else {
                eventType = a;
                typeOutput = typesOfEvents[a - 1];
            }
        }
    }

    // CH3**************************
    public int setGuests(int x) {
        if (x < 50) {
            pricePerGuests = lowPricePerGuest;
            numberOfGuests = x;
        } else {
            pricePerGuests = highPricePerGuest;
            numberOfGuests = x;
        }
        return numberOfGuests;
    }

    public int priceTotal() {
        priceTotal = pricePerGuests * numberOfGuests;
        return this.priceTotal;
    }

    // Add a set method for the contact phone number field
    public void getPhoneNumber(String x) {
        phoneNumber = x;
        setPhoneNumber(phoneNumber);
    }

    public static String setPhoneNumber(String x) {
        if (x.length() >= 10) {
            phoneNumberFinal = x.replaceAll("[^a-zA-Z ]", "");
        } else {
            phoneNumberFinal = "000000000";
        }
        getPhone(phoneNumberFinal);

        return phoneNumberFinal;
    }

    // Format Phone number
    public static String getPhone(String x) {

        if (x.length() == 10) {
            formattedPhoneNumber = x.replaceAll("(\\d{3})(\\d{3})(\\d+)", "($1) $2-$3");

        } else {
            formattedPhoneNumber = "000-000-0000";
        }

        return formattedPhoneNumber;
    }

    // Add a new method named isLargeEvent()
    public boolean isLargeEvent() {
        if (numberOfGuests >= CUT_OFF_VALUE) {
            return true;
        } else {
            return false;
        }
    }

    public void displayDetails() {
        System.out.println("\n");
        System.out.println("Event number: " + eventNumber);
        System.out.println("Number of guests: " + numberOfGuests);
        System.out.println("The price per guests: " + pricePerGuests);
        System.out.println("Final price: $" + priceTotal());
        System.out.println("Is large event: " + isLargeEvent());
        System.out.println("Phone Number: " + formattedPhoneNumber);
        System.out.println("Event Type: " + typeOutput);
        System.out.println("\n");
    }

}
========================StaffDinner====================7

import java.io.Console;
import java.util.*;

public class StaffDinnerEvent {
    //
    static int waitStaff;

    public static void main(String[] args) {
        // Employee[] employee = new Employee[15];
        // List<Integer> coordinatorLists = new ArrayList<>();
        // List<Integer> bartenderLists = new ArrayList<>();
        // List<Integer> waitstaffLists = new ArrayList<>();
        Scanner myObj = new Scanner(System.in);

        int num = 0;
        DinnerEvent dinnerEvent = new DinnerEvent();

        for (int x = 0; x < 2; x++) {

            System.out.println("\n" + "Enter number of guests ");
            num = Integer.parseInt(myObj.nextLine());

            System.out.println("Enter event number: ");
            String eveNum = myObj.nextLine();

            System.out.println("Enter event type: ");
            int eveType = Integer.parseInt(myObj.nextLine());

            System.out.println("Enter phone number: ");
            String phoneNum = myObj.nextLine();

            System.out.println(dinnerEvent.getMenu());
            System.out.println("\n" + "Choose an entree 1-3: ");
            int entreeChoice = Integer.parseInt(myObj.nextLine());

            System.out.println("\n" + "Choose a side 1-3: ");
            int sideChoice1 = Integer.parseInt(myObj.nextLine());

            System.out.println("\n" + "Choose a side second side 1-3: ");
            int sideChoice2 = Integer.parseInt(myObj.nextLine());

            System.out.println("\n" + "Choose a dessert 1-3: ");
            int dessert = Integer.parseInt(myObj.nextLine());

            dinnerEvent.setGuests(num);
            dinnerEvent.setEventNumber(eveNum);
            dinnerEvent.setEventType(eveType);
            dinnerEvent.getPhoneNumber(phoneNum);
            dinnerEvent.displayDetails();
            dinnerEvent.getMenu();
            dinnerEvent.getDinnerChoices(entreeChoice, sideChoice1, sideChoice2, dessert);

        }

        Employee[] employees = new Employee[2];
        for (int i = 0; i < employees.length; i++) {

            employees[i] = getWaitstaff();
            employees[i] = getBartender();
            employees[i] = getCoordinator();
        }

        displayStaff(employees);

    }

    public static Waitstaff getWaitstaff() {

        Scanner obj = new Scanner(System.in);
        Waitstaff waitStaff = new Waitstaff();
        System.out.print("Enter Employee number for waitstaff >> ");
        waitStaff.setID(obj.nextLine());
        System.out.print("Enter first name >> ");
        waitStaff.setFirstName(obj.nextLine());
        System.out.print("Enter last name >> ");
        waitStaff.setLastName(obj.nextLine());
        System.out.print("Enter pay rate >> ");
        waitStaff.setRate(obj.nextInt());
        waitStaff.setTitle();
        return waitStaff;

    }

    public static Bartender getBartender() {
        Scanner obj = new Scanner(System.in);
        Bartender bartender = new Bartender();
        System.out.print("Enter Employee number for bartender >> ");
        bartender.setID(obj.nextLine());
        System.out.print("Enter first name >> ");
        bartender.setFirstName(obj.nextLine());
        System.out.print("Enter last name >> ");
        bartender.setLastName(obj.nextLine());
        System.out.print("Enter pay rate >> ");
        bartender.setRate(obj.nextInt());
        bartender.setTitle();
        return bartender;
    }

    public static Coordinator getCoordinator() {
        Scanner obj = new Scanner(System.in);
        Coordinator coordinator = new Coordinator();
        System.out.print("Enter Employee number for coordinator >> ");
        coordinator.setID(obj.nextLine());
        System.out.print("Enter first name >> ");
        coordinator.setFirstName(obj.nextLine());
        System.out.print("Enter last name >> ");
        coordinator.setLastName(obj.nextLine());
        System.out.print("Enter pay rate >> ");
        coordinator.setRate(obj.nextInt());
        coordinator.setTitle();
        return coordinator;
    }

    public static void displayStaff(Employee[] employee) {
        for (int i = 0; i < employee.length; i++) {
            employee[i].getID();
            employee[i].getLastName();
            employee[i].getFirstName();
            employee[i].getRate();
        }
    }
}
