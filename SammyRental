===============Rental.java======================1
import java.util.Arrays;
import java.util.Scanner;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

public class Rental {
    // Two public final static fields that hold the number of minutes in an hour and
    // the hourly rental rate
    final static int MINUTES_IN_AN_HOUR = 60;
    final int RENT_PER_HOUR = 40;
    final int ADDITIONAL_HOUR = 1;

    protected String contractNumber;
    protected int hoursRented;
    private int additionalMinutes;
    private int total;

    // Add a contact phone number field
    public static String phoneNumber = "";
    public static String phoneNumberFinal = "";
    public static String formattedPhoneNumber = "";

    // CH8 integer field that holds an event type
    public static int equipType;
    String typeOutput;

    // CH11
    int baseFee;
    Equipment equipment;

    // Two public set methods
    // Four public get methods that return the values in the four nonstatic fields.

    public Rental(String contractNumber, int additionalMinutes, int equipmentType) {
        setContractNumber(contractNumber);

        if (equipType < Equipment.equipNameList.length - 5) {
            this.equipment = new EquipmentWithLesson(equipType);
        } else if (equipType > Equipment.equipNameList.length - 5 && equipType < Equipment.equipNameList.length) {
            this.equipment = new EquipmentWithoutLesson(equipType);
        }
        setHoursAndMinutes(additionalMinutes, Equipment.surcharges[equipType]);
    }

    public Rental() {
    }

    public String getcontractNumber() {
        return this.contractNumber;
    }

    public int gethoursRented() {
        return hoursRented;
    }

    public int getAdditionalMinutes() {
        return additionalMinutes;
    }

    // ########CH8 get and set methods for the int event type####

    public String setContractNumber(String x) {
        if (x.length() > 4) {
            x = "A000";
        } else if (x.length() == 4) {
            if (!Character.isAlphabetic(x.charAt(0)) || !Character.isDigit(x.charAt(1))
                    || !Character.isDigit(x.charAt(2)) || !Character.isDigit(x.charAt(3))) {
            }
        }
        return contractNumber = x;
    }

    public void setHoursAndMinutes(int x, int baseFee) {
        int user_input_time;
        this.baseFee = baseFee;
        if (x >= RENT_PER_HOUR) {
            user_input_time = x / MINUTES_IN_AN_HOUR;
            additionalMinutes = x % MINUTES_IN_AN_HOUR;
            total = (user_input_time * RENT_PER_HOUR + additionalMinutes + baseFee) * ADDITIONAL_HOUR;
        } else {
            baseFee = x;
        }

    }

    // CH9 arraylists
    List<Integer> guestAmount = new ArrayList<>();
    List<Integer> eventType = new ArrayList<>();
    List<String> eventNumb = new ArrayList<>();

    public String getPhoneNumber(String x) {
        phoneNumber = x;
        setPhoneNumber(phoneNumber);
        return phoneNumber;
    }

    public String setPhoneNumber(String x) {
        if (x.length() == 10) {
            x.replaceAll("[^a-zA-Z ]", "");
            phoneNumberFinal = x;
        } else {
            x = "0000000000";
            phoneNumberFinal = x;
        }
        getPhone(phoneNumberFinal);
        return phoneNumberFinal;
    }

    // Format Phone number
    public static String getPhone(String x) {

        if (x.length() >= 10) {
            formattedPhoneNumber = x.replaceAll("(\\d{3})(\\d{3})(\\d+)", "($1) $2-$3");
        }

        return formattedPhoneNumber;
    }

    public void displayDetails(String v) {
        System.out.println("\n");
        System.out.println("Contract Number: " + contractNumber);
        System.out.println("Type of equipment: " + typeOutput);
        System.out.println("Hourly Rate: " + RENT_PER_HOUR);
        System.out.println("Additional minutes: " + additionalMinutes);
        System.out.println("Total: " + total);
        System.out.println("Phone Number: " + formattedPhoneNumber);
        System.out.println("\n");
    }

}

========================Equipment=======================2

public abstract class Equipment {
    private int equipType;
    private final String equipName = "";
    static final String[] equipNameList = { "personal watercraftski", "pontoon boat", "rowboat", "canoe", "kayak",
            "beachchair", "umbrella", "other" };
    static int[] surcharges = { 50, 40, 15, 12, 10, 2, 1, 0 };
    int equipSelect;
    int rentFee;

    public Equipment() {

    }

    public Equipment(int equipType) {
        if (equipType < equipNameList.length) {
            this.equipType = equipType;
        } else {
            this.equipType = equipNameList.length - 1;
        }
    }

    public String getEquipType() {
        return equipNameList[equipSelect];
    }

    public String getEquipName() {
        return equipName;
    }

    public String[] getEquipNameList() {
        return equipNameList;
    }

    public int[] getSurcharges() {
        return surcharges;
    }

    public void setEquipType(int equipType) {
        this.equipType = equipType;
    }

    public static void setEquipName(int equipSelect) {

    }

    public static void getEquipNameList(int equipNameList) {

    }

    public static void setSurcharges(int surcharges) {

    }

    @Override
    public String toString() {
        return String.format("print values", getEquipName(), getEquipType());
    }

    abstract String policy();

}


=====================LessonWithRental===================3

public class LessonWithRental extends Rental {

    boolean isRequired;
    final String[] instructorOptions = { "Gary", "Tina", "Kim", "Ted", "Lisa", "Ray", "Jim", "Nicole" };
    final String[] stores = { "Uptown", "Midtown", "Downtown", "Eastern", "Western", "Northern", "Southern", "none" };

    public LessonWithRental() {

    }

    public LessonWithRental(String contractNumber, int hoursRented, int equipType, int lessonsNeeded) {
        super.contractNumber = contractNumber;
        super.hoursRented = hoursRented;
        // super.typesOfEquips = equipType;
        lessonsNeeded = 1;
    }

    public String getInstructor() {

        String showInstructor = "<!--- Instructors ---!>\n";
        for (int i = 0; i < instructorOptions.length; i++) {
            showInstructor += ((i + 1) + ") " + instructorOptions[i] + "\n");
        }
        showInstructor = "<!--- Equipment ---!>\n";
        for (int i = 0; i < stores.length; i++) {
            showInstructor += ((i + 1) + ") " + stores[i] + "\n");
        }

        // Return instructor
        return showInstructor;
    }

}

=======================RentalDemo===================4
import java.util.*;
import java.util.Scanner;
import java.util.*;
import java.util.Collections;

public class RentalDemo {

    public static void main(String[] args) {

        final int SIZE = 8;
        Rental[] rental = new Rental[SIZE];
        Scanner myObj = new Scanner(System.in);
        String contractNum;
        // CH9
        List<String> contractNumbLists = new ArrayList<>();
        List<Integer> equipTypeLists = new ArrayList<>();
        List<Integer> mintuesLists = new ArrayList<>();
        // CH10
        LessonWithRental[] LessonWithRental = new LessonWithRental[SIZE];
        List<Integer> typesOfEquipmentSort = new ArrayList<>();
        List<Integer> instructorSort = new ArrayList<>();
        List<Integer> lessons = new ArrayList<>();
        // CH11
        Rental[] rentals = new Rental[8];
        int minutes;

        for (int i = 0; i < rentals.length; ++i) {
            contractNum = getcontractNumber();
            minutes = getMinutes();
            rentals[i] = new Rental(contractNum, minutes, getType());
            rentals[i].setPhoneNumber(getPhone());
        }

        sortHere(contractNumbLists, equipTypeLists, mintuesLists);
        printRental(rental, LessonWithRental);
        int userInput;
        while (true) {
            sortRental();
            userInput = myObj.nextInt();
            if (userInput == 100)
                break;
            else if (userInput == 1) {
                sortByContractNumber(rental, contractNumbLists);
                System.out.println("\nAfter sorting Rental List Based on Contract Number");
            } else if (userInput == 2) {
                sortByEquipNumber(rental, typesOfEquipmentSort);
                System.out.println("\nAfter sorting Rental List Based on Equipment");
            } else if (userInput == 3) {
                sortByInstruct(rental, instructorSort);
                System.out.println("\nAfter sorting Rental List Based on Instructor");
            }
        }

    }

    public static String getcontractNumber() {
        Scanner myObj = new Scanner(System.in);
        ;
        System.out.println("Enter contract number: ");
        String contractNum = myObj.nextLine();
        return contractNum;
    }

    public static int getMinutes() {
        int minutes;
        final int LOW_MIN = 60;
        final int HIGH_MIN = 7200;
        Scanner myObj = new Scanner(System.in);
        System.out.print("Enter minutes >> ");
        minutes = myObj.nextInt();
        while (minutes < LOW_MIN || minutes > HIGH_MIN) {
            System.out.println("Time must be between " + LOW_MIN + " minutes and " + HIGH_MIN + " minutes");
            System.out.print("Please reenter minutes >> ");
            minutes = myObj.nextInt();
        }
        return minutes;

    }

    public static int getType() {
        int type;
        Scanner input = new Scanner(System.in);
        System.out.println("Equipment types:");
        // for (int i = 0; i < Equipment.equipNameList.length; ++i) {
        // System.out.println(" " + i + " " + Equipment.equipNameList[i]);
        // }
        System.out.print("Enter equipment type >> ");
        type = input.nextInt();
        return type;
    }

    public static void printRental(Rental[] rental, LessonWithRental[] LessonWithRental) {

        for (int i = 0; i < rental.length; i++) {

            System.out.println("\nInformation for Event number #" + (i + 1));

            System.out.println("The Contract Number is: " + rental[i].getcontractNumber());

            // System.out.println("The Event Type is : " + rental[i].getEquipType());

            System.out.println("Selected Entree : " + LessonWithRental[i].getInstructor());

        }
    }

    public static void sortHere(List<String> contractNumbLists, List<Integer> equipTypeLists,
            List<Integer> mintuesLists) {
        Scanner myObj = new Scanner(System.in);
        int i = 0;

        while (true) {
            System.out.print("\n" + "Enter type, 1:ContractNumb, 2:EquipType, 3:Minutes, 100 to exit" + "\n");
            int y = Integer.parseInt(myObj.nextLine());

            if (y == 1) {
                Collections.sort(contractNumbLists);
                System.out.print(contractNumbLists + "\n");

            } else if (y == 2) {
                Collections.sort(equipTypeLists);
                System.out.print(equipTypeLists + "\n");

            } else if (y == 3) {
                Collections.sort(mintuesLists);
                System.out.print(mintuesLists + "\n");

            } else if (y == 100) {
                System.out.print("exit" + "\n");
                break;
            } else {
                System.out.print("enter numbers or push 100" + "\n");

            }

        }
    }

    private static void sortRental() {

        System.out.println("\n1) To Sort List based on Event Number.");

        System.out.println("2) To Sort List based on Number Of Guest.");

        System.out.println("3) To Sort List based on Event Type.");

        System.out.println("100) To Exit.");

        System.out.print("Enter Your choice: ");

    }

    private static void sortByContractNumber(Rental[] rental, List<String> contractNumbLists) {
        for (int i = 0; i < rental.length; i++) {
            Collections.sort(contractNumbLists);

        }
        System.out.print(contractNumbLists);
    }

    private static void sortByEquipNumber(Rental[] rental, List<Integer> typesOfEquipmentSort) {
        for (int i = 0; i < rental.length; i++) {
            Collections.sort(typesOfEquipmentSort);

        }
        System.out.print(typesOfEquipmentSort);
    }

    private static void sortByInstruct(Rental[] rental, List<Integer> instructorSort) {
        for (int i = 0; i < rental.length; i++) {
            Collections.sort(instructorSort);

        }
        System.out.print(instructorSort);

    }

    public static String getPhone() {
        String phone;
        Scanner input = new Scanner(System.in);
        System.out.print("Enter contact phone number >> ");
        phone = input.nextLine();
        return phone;
    }

}
============equipmentwithoutlesson=================5

public class EquipmentWithoutLesson extends Equipment {

    public EquipmentWithoutLesson(int equipType, String equipName, String[] equipNameList, int[] surcharges) {
        super(equipType);
    }

    public EquipmentWithoutLesson(int equipType) {
    }

    @Override
    String policy() {
        return "This type of rental does not require a lesson";
    }

}

==============LessonWithRental======================
public class LessonWithRental extends Rental {

    boolean isRequired;
    final String[] instructorOptions = { "Gary", "Tina", "Kim", "Ted", "Lisa", "Ray", "Jim", "Nicole" };
    final String[] stores = { "Uptown", "Midtown", "Downtown", "Eastern", "Western", "Northern", "Southern", "none" };

    public LessonWithRental() {

    }

    public LessonWithRental(String contractNumber, int hoursRented, int equipType, int lessonsNeeded) {
        super.contractNumber = contractNumber;
        super.hoursRented = hoursRented;
        // super.typesOfEquips = equipType;
        lessonsNeeded = 1;
    }

    public String getInstructor() {

        String showInstructor = "<!--- Instructors ---!>\n";
        for (int i = 0; i < instructorOptions.length; i++) {
            showInstructor += ((i + 1) + ") " + instructorOptions[i] + "\n");
        }
        showInstructor = "<!--- Equipment ---!>\n";
        for (int i = 0; i < stores.length; i++) {
            showInstructor += ((i + 1) + ") " + stores[i] + "\n");
        }

        // Return instructor
        return showInstructor;
    }

}
================EquipmentWithLesson================

public class EquipmentWithLesson extends Equipment {

    public EquipmentWithLesson(int equipType, String equipName, String[] equipNameList, int[] surcharges) {
        super(equipType);
    }

    public EquipmentWithLesson(int equipType) {
    }

    @Override
    String policy() {
        return "This type of rental requires a lesson";
    }

}

